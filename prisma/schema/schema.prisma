generator client {
  provider     = "prisma-client"
  output       = "../../src/generated/prisma"
  moduleFormat = "esm"
  runtime      = "nodejs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String
  emailVerified   Boolean   @default(false)
  image           String?
  role            String?
  banned          Boolean?  @default(false)
  banReason       String?
  banExpires      DateTime?
  isAnonymous     Boolean?
  username        String?
  displayUsername String?

  // Relations
  sessions Session[]
  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id @default(uuid())
  userId         String
  expiresAt      DateTime
  token          String
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
